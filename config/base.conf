worker_processes  1;

events {
  worker_connections  1024;
}

http {
  init_by_lua_block {
    string = require("string");
    cjson = require("cjson");
    balancer = require "ngx.balancer";
  }

  default_type application/octet-stream;
  include /etc/nginx/mime.types;
  sendfile on;
  keepalive_timeout 65;

  upstream engine_backend {
    server 0.0.0.1;   # just an invalid address as a place holder
    balancer_by_lua_block {
      local ok, err = balancer.set_current_peer(ngx.var.qix_session_host, ngx.var.qix_session_port);
      if not ok then
        return ngx.exit(500)
      end;
    }
  }

  upstream kibana_backend {
    server kibana:5601;
  }

  upstream qss_backend {
    server qliktive-qix-session-service:9455;
  }

  server {
    listen 80;
    server_name localhost;

    location /kibana/ {
      proxy_http_version 1.1;
      proxy_pass http://kibana_backend/;
    }

    location /hellochart {
       root html;
       index index.html;
    }

    location /data {
      root html;
    }

    location /qix_session_service {
      # only exposed internally, used during requests to /doc:
      internal;
      proxy_http_version 1.1;
      proxy_pass http://qss_backend/v1/session;
    }

    location /doc {
      set $qix_session_host '';
      set $qix_session_port '';
      rewrite_by_lua_block {
        local uri = string.sub(ngx.var.request_uri, 5);
        local routeResponse = ngx.location.capture("/qix_session_service" ..  uri);
        if routeResponse.status == 200 then
          local qix_session_route_data = cjson.decode(routeResponse.body);
          ngx.var.qix_session_host = qix_session_route_data.ipAddress;
          ngx.var.qix_session_port = qix_session_route_data.port;
          ngx.req.set_header("X-Qlik-Session", qix_session_route_data.sessionId)
          ngx.req.set_uri("/app/engineData");
        else
          ngx.exit(routeResponse.status);
        end
      }
      proxy_set_header X-Real-IP $proxy_protocol_addr;
      proxy_set_header X-Forwarded-For $proxy_protocol_addr;
      proxy_set_header X-Forwarded-Port 80;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Upgrade $http_upgrade;

      proxy_http_version 1.1;
      proxy_pass http://engine_backend/;
    }
  }
}
